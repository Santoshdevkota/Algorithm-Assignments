Topic description
You are a professional robber planning to rob houses along a street. 
Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems 
connected and  it will automatically contact the police if two adjacent houses were broken into on the same night .

Given an integer array  nums representing the amount of money 
of each house, return  the maximum amount of money you can rob tonight  
without alerting the police .

Sample input and output
Example 1
Enter :
[1,2,3,1]
output :
4
Example 2
Enter :
[2,7,9,3,1]
output :
12

#include <iostream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

int rubbHouse(vector<int> nums)
{
    if (nums.size() == 0)
        return 0;
    if (nums.size() < 2)
        return nums[0];

    int result = max(nums[0], nums[1]);
    int b = nums[0];

    for (int i = 2; i < nums.size(); i++)
    {
        int temp = max(result, b + nums[i]);
        b = result;
        result = temp;
    }

    return result;
}

int main()
{
    int a;
    vector<int> nums;

    string bufferr;
    getline(cin, bufferr);

    for (int i = 0; i < bufferr.length(); i++)
    {
        char my = bufferr[i];

        if (my == ',' || my == '[' ||)
            continue;

        char x = bufferr[i];
        a = x - '0';
        nums.push_back(a);
    }
    cout << rubbHouse(nums);
    return 0;
}
