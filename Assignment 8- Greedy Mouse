A fat mouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food:peanut. 
The warehouse has N rooms. The ith room containsW[i] pounds of peanut and requires F[i] pounds of cat food.  
Fatmouse does not have to trade for all the peanut in the room, instead, he may get W[i]*a% pounds of peanut if he pays F[i]*a% pounds of cat food. 
The mouse is a greedy mouse, so can you tell him the maximum amount of peanut he can obtain.

Input:
The input consists of multiple test cases.  Each test case begins with a line containing two non-negative integers M and N. 
Then N lines follow,  each contains two non-negative integers W[i] and F[i] respectively. The test case is terminated by two -1.  
All integers are not greater than 1000.

Output:

For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of penaut that FatMouse can obtain.

**************************************************************
Expected input and Output 
Input:
5 3
7 2
4 3
5 2
20 3
25 18
24 15
15 10
-1 -1
Output:
13.333
31.500
************************************************************
Code:
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <vector>

using namespace std;

// creating a structure to store peanuts, catfood and the M/N
struct Room
{
	int peanut;
	int catFood;
	float rate;
};

// sorting rooms according to rate

bool compare(Room a, Room b)
{
	return a.rate > b.rate;
}

int main()
{
	int m, n;
	double sum;
	vector<float> storage;
	vector<Room> rooms;

	Room strinfo; // variable for structure
	cin >> m >> n;
	while (m != -1 && n != -1) //check whether m and n are -1
	{
		rooms.clear();
		sum = 0;

		for (int i = 0; i < n; i++)
		{
			cin >> strinfo.peanut >> strinfo.catFood;

			cout << setprecision(3);
			strinfo.rate = (float)strinfo.peanut / strinfo.catFood;
			rooms.push_back(strinfo);
		}

		// sorting based on rate

		sort(rooms.begin(), rooms.end(), compare);

		// calculating the maximum amount of peanuts

		for (int i = 0; i < rooms.size(); i++)
		{
			if (m <= rooms[i].catFood)
			{
				sum += m * rooms[i].rate;
				// storage.push_back(sum);
				break;
			}
			else
			{
				sum += rooms[i].peanut;
				m -= rooms[i].catFood;
			}
		}
		storage.push_back(sum);

		cin >> m >> n;
	}

	for (int i = 0; i < storage.size(); i++)
		cout << fixed << setprecision(3) << storage[i] << "\n"; // printing the decimal values answer with fixed size
	return 0;
}
